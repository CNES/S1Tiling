variables:
    BUILD_IMAGE_REGISTRY: $CI_REGISTRY/orfeotoolbox/otb-build-env
    LC_ALL: C.UTF-8
    # Set pip's cache inside the project directory since we can only cache local items
    PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

# image: $BUILD_IMAGE_REGISTRY/otb-ubuntu-base
image: $BUILD_IMAGE_REGISTRY/otb-ubuntu-native-develop:latest

.common-doc:
    variables:
        CPLUS_INCLUDE_PATH: /usr/include/gdal
        C_INCLUDE_PATH: /usr/include/gdal
        LD_LIBRARY_PATH: /opt/otb/lib:${LD_LIBRARY_PATH}
        PYTHONPATH: /opt/otb/lib/otb/python:${PYTHONPATH}
        OTB_APPLICATION_PATH: /opt/otb/lib/otb/applications:${OTB_APPLICATION_PATH}
    cache:
        key: packages
        paths:
        - $CI_PROJECT_DIR/.cache/pip
        - S1TilingEnv

    before_script:
    - mkdir -p "${PIP_CACHE_DIR}"
    ## doc generation requires S1Tiling through autodoc
    # => We need to be able to install S1Tiling
    #- find /opt/otb
    - apt -y update
    - apt-get -y install libgdal-dev
    - apt-get -y install rclone
    - which rclone
    # - gdal-config --version
    - curl https://bootstrap.pypa.io/get-pip.py --output get-pip.py
    - python3 --version
    - python3 get-pip.py
    - python3 -m pip install virtualenv
    - virtualenv S1TilingEnv
    - source S1TilingEnv/bin/activate
    - python3 -m pip install "gdal==$(gdal-config --version)"
    - python -c "from osgeo import gdal ; print(gdal.__version__)"
    - python3 -m pip install .[docs]


# Test the documentation compiles
test:
    extends: .common-doc
    stage: test
    script:
    - sphinx-build -b html -d _build/doctrees docs _build/html -v
    - mkdir -p test
    - echo "CI_PIPELINE_ID=${CI_PIPELINE_ID}"
    - mv _build/html test/${CI_PIPELINE_ID}
    artifacts:
        name: "$CI_PIPELINE_ID"
        paths:
        - test
        expire_in: 5 days
    except:
    - master
    - develop
    - /^[0-9]+\.[0-9]+.*/

# Upload latest documentation when develop/master branches are updated
pages:
    extends: .common-doc
    stage: deploy
    script:
    - mkdir public
    - [[ -v CI_PIPELINE_ID ]]
    - [[ -v RCLONE_CONFIG_FILENAME ]]
    - rclone config "${RCLONE_CONFIG_FILENAME}"
    # TODO: lock access to public
    - rclone copy s3_otb:www public || echo "Oups| no www/ on S3"
    # Check cache
    - ls public
    - docs/install_and_deploy_doc.sh public
    - rclone copy public s3_otb:www
    artifacts:
        paths:
        - public
    environment:
        name: generate_docs
    only:
    - master
    - develop
    - /^[0-9]+\.[0-9]+.*/
