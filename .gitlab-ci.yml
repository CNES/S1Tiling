# =========================================================================
#   Program:   S1Processor
#
#   Copyright 2017-2023 (c) CNES. All rights reserved.
#
#   This file is part of S1Tiling project
#       https://gitlab.orfeo-toolbox.org/s1-tiling/s1tiling
#
#   Licensed under the Apache License, Version 2.0 (the "License");
#   you may not use this file except in compliance with the License.
#   You may obtain a copy of the License at
#
#       http://www.apache.org/licenses/LICENSE-2.0
#
#   Unless required by applicable law or agreed to in writing, software
#   distributed under the License is distributed on an "AS IS" BASIS,
#   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#   See the License for the specific language governing permissions and
#   limitations under the License.
#
# =========================================================================
#
# Authors: Thierry KOLECK (CNES)
#          Luc HERMITTE (CS Group)
#
# =========================================================================

variables:
    BUILD_IMAGE_REGISTRY: $CI_REGISTRY/s1-tiling
    LC_ALL: C.UTF-8
    # Set pip's cache inside the project directory since we can only cache local items
    # PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"
    # See Issue#86: https://gitlab.orfeo-toolbox.org/s1-tiling/s1tiling/-/issues/86
    FF_USE_LEGACY_KUBERNETES_EXECUTION_STRATEGY: 0
    S1TD_VERSIONVERSION: "1.3.0"  # S1Tiling Dockers version
    OS: "ubuntu"
    OTB_VERSION: "7.4.1"
    FULL_VERSION: "${S1TD_VERSIONVERSION}-${OS}-otb${OTB_VERSION}"

#
# Tests and documentation
#
.common:
    image: ${BUILD_IMAGE_REGISTRY}/s1tiling-dockers/s1tiling-dev:${FULL_VERSION}
    variables:
    # cache:
    #     key: packages
    #     paths:
    #     # - $CI_PROJECT_DIR/.cache/pip
    #     # - S1TilingEnv
    #     # - baseline

    before_script:
    # - mkdir -p "${PIP_CACHE_DIR}"
    ## doc generation requires S1Tiling through autodoc
    # => We need to be able to install S1Tiling
    #- find /opt/otb
    - apt-get -y update
    - apt-get -y upgrade
    - python3 --version
    - . /tmp/${S1TILING_VENV}/bin/activate && echo "virtualenv /tmp/${S1TILING_VENV} loaded"
    - . "${OTB_INSTALL_DIRNAME}/otbenv.profile" && echo "OTB loaded from ${OTB_INSTALL_DIRNAME}"
    - gdal-config --version
    - python3 -m pip install --upgrade pip
    - echo $LD_LIBRARY_PATH
    - find / -name "libgdal.so*"
    - ldd /tmp/${S1TILING_VENV}/lib/python*/site-packages/osgeo/_gdal.cpython-38-x86_64-linux-gnu.so
    - python -c "from osgeo import gdal ; print(gdal.__version__)"
    - ls "${OTB_INSTALL_DIRNAME}"
    # - set
    - echo "installing .[${INSTALL_TYPE}]"
    - python3 -m pip install .[${INSTALL_TYPE}]

.common-doc:
    variables:
        INSTALL_TYPE: docs
    extends: .common

.common-dev:
    variables:
        INSTALL_TYPE: dev
    extends: .common

# Package
package:
    extends: .common-dev
    stage: build
    script:
    - python3 setup.py sdist bdist_wheel
    artifacts:
        paths:
            - dist/

# Run tests
pytest:
    resource_group: raoul_is_really_constrainst
    variables:
        KUBERNETES_CPU_REQUEST: 4
        KUBERNETES_MEMORY_REQUEST: 4Gi
    extends: .common-dev
    stage: test
    script:
    - test -d baseline || mkdir baseline
    - rclone -v -L sync s3_otb:s1-tiling/baseline baseline || echo "Oups| no baseline/ on S3"
    - ls baseline
    # - find baseline/expected -type f -exec md5sum {} \;
    - (cd baseline && find . -type f -exec md5sum {} \;)
    - python3 -m pytest --baselinedir=$(readlink -f baseline) --srtmdir=$(readlink -f baseline/MNT/SRTM_30_hgt) --ram=2048 -o log_cli_level=info -o log_cli=true --junitxml=report.xml
    artifacts:
        when: always
        reports:
            junit: report.xml

# Test the documentation compiles
test-doc:
    resource_group: raoul_is_really_constrainst
    extends: .common-doc
    stage: test
    script:
    - sphinx-build -b html -d _build/doctrees docs _build/html -v
    - mkdir -p test
    - echo "CI_PIPELINE_ID=${CI_PIPELINE_ID}"
    - mv _build/html test/${CI_PIPELINE_ID}
    artifacts:
        name: "$CI_PIPELINE_ID"
        paths:
        - test
        expire_in: 5 days
    except:
    - master
    - develop
    - /^[0-9]+\.[0-9]+.*/

# Package
#
# Requires the following variables:
# - TWINE_PASSWORD
# - TWINE_USERNAME
pypi:
    extends: .common-dev
    stage: deploy
    script:
    # Upload only EGG as Wheel as formal dependency to gdal.
    - python3 -m pip install --upgrade twine
    - echo python3 -m twine upload --repository pypi dist/S1Tiling-*.tar.gz
    # TODO: test the variables exist!
    - python3 -m twine upload --repository pypi dist/S1Tiling-*.tar.gz
    dependencies:
        - package
    only:
        # - tags
        - /^[0-9]+\.[0-9]+.*/

# Upload latest documentation when develop/master branches are updated
pages:
    extends: .common-doc
    stage: deploy
    # resource_group: documentation_cache
    resource_group: raoul_is_really_constrainst
    script:
    - mkdir public
    # TODO: lock access to public
    - rclone copy s3_otb:s1-tiling/www public || echo "Oups| no www/ on S3"
    # Check cache
    - ls public
    - docs/install_and_deploy_doc.sh public
    - rclone copy public s3_otb:s1-tiling/www
    artifacts:
        paths:
        - public
    environment:
        name: generate_docs
    only:
    - master
    - develop
    - /^[0-9]+\.[0-9]+.*/

#======================================================================
#
# Docker generation
#
.prepare-docker-config: &prepare-docker-config
  - echo "{\"auths\":{\"$CI_REGISTRY\":{\"username\":\"$CI_REGISTRY_USER\",\"password\":\"$CI_REGISTRY_PASSWORD\"}}}"
           > /kaniko/.docker/config.json

.common-docker-build:
  image:
    name: gcr.io/kaniko-project/executor:v1.6.0-debug
    entrypoint: [""]
  before_script:
    - *prepare-docker-config
  script:
    - echo "CI_COMMIT_REF_NAME=$CI_COMMIT_REF_NAME"
    - sh $CI_PROJECT_DIR/docker/version_name.sh
    - echo "> docker pull ${CI_REGISTRY_IMAGE}/${OS}-otb${OTB_VERSION}:$(sh $CI_PROJECT_DIR/docker/version_name.sh)"
    - /kaniko/executor --cleanup
                       --verbosity info
                       --context $CI_PROJECT_DIR/
                       --dockerfile $CI_PROJECT_DIR/docker/Dockerfile
                       --destination $CI_REGISTRY_IMAGE:$(sh $CI_PROJECT_DIR/docker/version_name.sh)-${OS}-otb${OTB_VERSION}
                       --build-arg CI_PROJECT_DIR
                       --build-arg OTB_VERSION
                       --build-arg S1TILING_VERSION=$(sh $CI_PROJECT_DIR/docker/version_name.sh)

# Effective stages

ubuntu-user:
  extends: .common-docker-build
  stage: deploy
  variables:
    OS: ubuntu
    STEP: user
  only:
  - /^[0-9]+\.[0-9]+.*/
  - /^80-provide.*/

# vim: set sw=2:
